PLAYER, OPPONENT = 'X', 'O'

def is_moves_left(board):
    return any(cell == '-' for row in board for cell in row)

def evaluate(board):
    # Check rows
    for row in board:
        if row[0] == row[1] == row[2] == PLAYER:
            return 10
        elif row[0] == row[1] == row[2] == OPPONENT:
            return -10
    
    # Check columns
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] == PLAYER:
            return 10
        elif board[0][col] == board[1][col] == board[2][col] == OPPONENT:
            return -10
    
    # Check diagonals
    if board[0][0] == board[1][1] == board[2][2] == PLAYER:
        return 10
    elif board[0][0] == board[1][1] == board[2][2] == OPPONENT:
        return -10
    
    if board[0][2] == board[1][1] == board[2][0] == PLAYER:
        return 10
    elif board[0][2] == board[1][1] == board[2][0] == OPPONENT:
        return -10
    
    return 0

def minimax(board, depth, is_max):
    score = evaluate(board)
    
    if score == 10:
        return score - depth
    if score == -10:
        return score + depth
    
    if not is_moves_left(board):
        return 0
    
    if is_max:
        best = float('-inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == '-':
                    board[i][j] = PLAYER
                    best = max(best, minimax(board, depth + 1, False))
                    board[i][j] = '-'
        return best
    
    else:
        best = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == '-':
                    board[i][j] = OPPONENT
                    best = min(best, minimax(board, depth + 1, True))
                    board[i][j] = '-'
        return best

def find_best_move(board):
    best_val = float('-inf')
    best_move = (-1, -1)
    
    for i in range(3):
        for j in range(3):
            if board[i][j] == '-':
                move_val = minimax(board, 0, False)
                board[i][j] = '-'
                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val
    
    return best_move

def print_board(board):
    for row in board:
        print(' '.join(row))

# Example usage:
board = [
    ['X', 'O', 'X'],
    ['-', 'O', '-'],
    ['-', '-', '-']
]

print("Initial Board:")
print_board(board)
print()

best_move = find_best_move(board)
print(f"Best move for {PLAYER} is: {best_move}")

if best_move != (-1, -1):
    board[best_move[0]][best_move[1]] = PLAYER

print("Board after best move:")
print_board(board)
